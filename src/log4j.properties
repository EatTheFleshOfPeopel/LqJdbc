#默认全部输出到控制台，开发阶段使用
log4j.rootLogger=INFO,stdout,logfile
#===================输出到控制台============================================
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#输出信息附加，为true，将出现保留了大量空白行的日志。
#log4j.appender.stdout.Append=true
#指定输出日志级别，如果rootLogger默认没有设置的话，如：log4j.rootLogger=,stdout,logfile
#log4j.appender.stdout.Threshold=DEBUG
#布局模式
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#输出格式
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH\:mm\:ss,SSS} [%-5p]-[%c] %m%n 

#===================输出到文件，包括spring、hibernate========================
#实际运行环境中应该开启此日志，而关闭控制台日志
#-------------------每日产生一份日志，日志将被保留------------------
log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.logfile.DatePattern='.'yyyy-MM-dd
#-------------------滚动输出，日志将不保留，可以控制每一份日志的大小，日志的数量等等。适合开发阶段
#log4j.appender.logfile=org.apache.log4j.RollingFileAppender
#每一份日志的大小
#log4j.appender.logfile.MaxFileSize=500KB
#日志文件的最大个数
#log4j.appender.logfile.MaxBackupIndex=3

#-------------------日志输出到文件公共配置-------------------------
log4j.appender.logfile.File=/mnt/logs/default.log
#log4j.appender.logfile.Threshold=info
log4j.appender.logfile.encoding=utf-8
log4j.appender.logfile.Append=true
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=%d{yyyy-MM-dd HH\:mm\:ss,SSS} [%-5p]-[%c] %m%n 



#===================输出com.twovv产生的日志记录到数据库中=====================
#指定不同包级别的日志输出，注意：rootLogger将仍然有效，并且涵盖下面的设置。
##log4j.logger.com.twovv.*=INFO,db
#扩展org.apache.log4j.jdbc.JDBCAppender实现将信息分字段存储。
#log4j.appender.db=org.apache.log4j.jdbc.JDBCAppender
#log4j.appender.db.Threshold=warn
#每10条日志存储一次。减少数据库连接
#log4j.appender.db.BufferSize=2
#mssql数据库驱动
#log4j.appender.db.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver
#数据库路径
#log4j.appender.db.URL=jdbc:sqlserver://localhost:1433; DatabaseName=blossomLog
#log4j.appender.db.user=sqlserver
#log4j.appender.db.password=sql@server42454297
#插入数据库语句
#log4j.appender.db.sql=insert into vlog (user_id,do_class,do_mothod,do_date,log_level,log_msg,do_url) values ('%X{user_id}','%C','%M','%d{yyyy-MM-dd HH\:mm\:ss}','%p','%m','%X(do_url)') 
#log4j.appender.db.layout=org.apache.log4j.PatternLayout

#%标识说明：
#%d:输出日志时间点。默认为ISO8601，可以通过{formatting}来指定输出格式。
#%m:输出代码中指定的消息
#%p:输出优先级,可以通过%-{number}p 来指定输入number个空格，以使日志格式对齐。
#%r:输出自应用启动到输出该日志耗费的毫秒数
#%c:输出所属的目录，通常为所在类的全名。可以通过%c{number}来指定输出的类名范围。如：com.twovv.common.oop，使用%c{2}，将输出从第二个.后面的类名：common.oop
#%t:输出产生该日志的线程名
#%n:返回一个回车符号，也就是说换行了。
#%l:输出日志时间放生的位置，包括类目名、线程名、所在代码中的行数。相当于%C.%M(%F:%L)的组合
#%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。 
#%%: 输出一个”%”字符 
#%F: 输出日志消息产生时所在的文件名称 
#%L: 输出代码中的行号 
#可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如： 
#%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。 
#%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，”-”号指定左对齐。 
#%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。 
#%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。 
